{"version":3,"sources":["Components/Main.js","actions/userActions.js","actions/types.js","Reducers/userReducer.js","Reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","state","name","onChange","bind","onSubmit","e","preventDefault","string","this","console","log","fetchUser","setState","target","value","type","userexists","info","rank","Component","connect","user","userExists","dispatch","fetch","then","res","json","userData","payload","catch","error","initialState","combineReducers","action","result","handle","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iTAMMA,E,YAEN,WAAYC,GACX,IAAD,8BACE,4CAAMA,KACDC,MAAQ,CACZC,KAAM,IAED,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBANxB,E,sEASSE,GAERA,EAAEC,iBACF,IAAMC,EAAS,gDAAkDC,KAAKR,MAAMC,KAC5EQ,QAAQC,IAAIH,GACZC,KAAKT,MAAMY,UAAUJ,K,+BAGbF,GAERG,KAAKI,SAAL,eAAgBP,EAAEQ,OAAOZ,KAAOI,EAAEQ,OAAOC,U,+BAIzC,OAEC,6BACC,0BAAMV,SAAUI,KAAKJ,UAArB,eAEA,2BAAOW,KAAK,OAAOd,KAAK,OAAOa,MAAON,KAAKR,MAAMC,KAAMC,SAAUM,KAAKN,WACtE,4BAAQa,KAAK,UAAb,UACA,6BACEP,KAAKT,MAAMiB,YACb,uCACSR,KAAKT,MAAME,KADpB,IAC2B,6BAD3B,UAEQO,KAAKT,MAAMkB,KAAKC,KAFxB,IAE+B,oC,GArCfC,aAwDJC,eANS,SAAApB,GAAK,MAAK,CACjCgB,WAAYhB,EAAMqB,KAAKC,WACvBrB,KAAMD,EAAMqB,KAAKpB,KACjBgB,KAAMjB,EAAMqB,KAAKJ,QAGuB,CAAEN,UC5DlB,SAAAJ,GAAM,OAAI,SAAAgB,GAC/Bd,QAAQC,IAAI,iBACZc,MAAMjB,GACHkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAQ,OACZL,EAAS,CACPR,KCPgB,aDQhBc,QAASD,EACTN,WAAY,OAGfQ,OAAM,SAAAC,GACLR,EAAS,CACLR,KCdc,aDedc,QAASE,EACTT,WAAY,UD6CTF,CAA0CtB,G,uBG5DnDkC,EAAe,CACjBV,WAAY,EACZrB,KAAM,GACNgB,KAAM,ICFKgB,cAAgB,CAC3BZ,KDKW,WAAwC,IAA/BrB,EAA8B,uDAAtBgC,EAAcE,EAAQ,uCAClD,OAAOA,EAAOnB,MACV,QACI,OAAOf,EACX,IDZkB,aCcd,OADAS,QAAQC,IAAIwB,EAAOL,SACZ,eACA7B,EADP,CAEIC,KAAMiC,EAAOL,QAAQM,OAAO,GAAGC,OAC/BnB,KAAMiB,EAAOL,QAAQM,OAAO,GAC5Bb,WAAYY,EAAOZ,iBEb7Be,EAAa,CAACC,KAWLC,EATDC,YACNC,EALa,GAObC,YACAC,IAAe,WAAf,EAAmBN,GACnBO,OAAOC,8BAAgCD,OAAOC,iCCOrCC,MAXjB,WACE,OACE,kBAAC,IAAD,CAAUP,MAAOA,GACjB,yBAAKQ,UAAU,OACf,6BACA,kBAAC,EAAD,SCFgBC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAM8B,c","file":"static/js/main.509e7534.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { fetchUser } from '../actions/userActions'\nimport { connect } from 'react-redux'\n\n\nclass Main extends Component {\n\nconstructor(props)\n{\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: '',\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n}\n\nonSubmit(e)\n{\n\te.preventDefault();\n\tconst string = 'https://codeforces.com/api/user.info?handles=' + this.state.name;\n\tconsole.log(string);\n\tthis.props.fetchUser(string);\n}\n\nonChange(e)\n{\n\tthis.setState({[e.target.name]: e.target.value});\n}\n\nrender() {\n\treturn (\n\t\t\n\t\t<div>\n\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\tEnter Name :\n\t\t\t<input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onChange}/>\n\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t<br/>\n\t\t\t{ this.props.userexists &&\n\t\t\t<div>\n\t\t\tName : { this.props.name }\t<br/>\t\n\t\t\tRank : {this.props.info.rank } <br/>\n\t\t\t</div>\n\t\t\t}\n\t\t\t</form>\n\t\t</div>\n\t\t)\n\t}\n}\n\nMain.propTypes = {\n\tfetchUser: PropTypes.func.isRequired\n  };\n\nconst mapStateToProps = state => ({\n\tuserexists: state.user.userExists,\n\tname: state.user.name,\n\tinfo: state.user.info\n})\n\nexport default connect(mapStateToProps , { fetchUser })( Main );","import { FETCH_USER } from './types';\n\nexport const fetchUser = string => dispatch => {\n    console.log(\"Actionfetched\");\n    fetch(string)\n      .then(res => res.json())\n      .then(userData =>\n        dispatch({\n          type: FETCH_USER,\n          payload: userData,\n          userExists: 1\n        })\n      )\n      .catch(error => {\n        dispatch({\n            type: FETCH_USER,\n            payload: error,\n            userExists: 0\n          })\n    });\n  };","// Defines constant\nexport const FETCH_USER = 'FETCH_USER';","import { FETCH_USER } from '../actions/types';\n\nconst initialState = {\n    userExists: 0,\n    name: '',\n    info: {}\n}\n\n\nexport default function(state = initialState, action) {\n    switch(action.type) {\n        default:\n            return state;\n        case FETCH_USER:\n            console.log(action.payload);\n            return {\n                ...state,\n                name: action.payload.result[0].handle,\n                info: action.payload.result[0],\n                userExists: action.userExists\n            };\n    }\n}","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n    user: userReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './Reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n        rootReducer,\n        initialState,\n        compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Main from './Components/Main';\n\nimport store from './store'\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n    <hr/>\n    <Main/>\n    </div>\n    </Provider>\n    );\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}